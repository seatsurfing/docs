{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Seatsurfing Documentation","text":"<p>Seatsurfing is a cloud native solution for free seating and co-working in your organisation.</p> <p>This documentation guides you through installing Seatsurfing on your servers, placing seats and spaces as an organisation's administrator and using the mobile app on your smartphone.</p>"},{"location":"admin-ui/","title":"Administration UI","text":"<p>You can access the adminisatration web interface using a modern web browser by visiting your Seatsurfing's instance backend:</p> <p>http://localhost:8080/admin/</p> <p>To log in to the administrator interface, your user must be equipped with org admin permissions.</p> <p>After logging in, you'll see a web interface like this:</p> <p></p> <p>At the left, you can navigate to the various areas of the administrator interface.</p> <p>At the head, you can quickly search for objects (such as users, locations, spaces). Right beside the search bar, you can log out.</p> <p>The main area views the functionality you've selected. Right after logging in, the main area shows current statistics in a dashboard.</p>"},{"location":"admin-ui/#dashboard","title":"Dashboard","text":"<p>The dashboard shows current statistics for your Seatsurfing organisation. The statistics and numbers are intended to support you in review usage and user acceptance. Furthermore, Seatsurfing calculates space utilization in real time. This way you can always keep an eye on supply and demand.</p> <p>The top of the dashboard shows information regarding the number of users, locations and spaces as well as the total mumber of bookings.</p> <p>Below that, you can see current booking numbers of today, yesterday, the current week and the previous week.</p> <p>The bar charts visualize the utilization of your spaces.</p>"},{"location":"admin-ui/#areas","title":"Areas","text":"<p>An area in Seatsurfing is anything that has a ground plan. This can be a single floor on a building. In this area you can manage spaces. A space is something a user can book \u2013 depending on your concept, it can be a seat, a desk or an entire room.</p> <p>In the \"Areas\" section you can manage your areas and the spaces within them.</p> <p>In order to manage spaces in an area, you have to upload a floor plan in JPEG, PNG or GIF format. Make sure your floor plan has an appropriate format and resolution. If the resolution is too high, your employees need to scroll a lot and may lose the plot.</p> <p>You can place spaces via drag &amp; drop. Keep the left mouse button pressed to move a space around. To change a space's size, click the lower right corner of a space. To name a space, click on the space's label and enter the new name.</p> <p>Don't forget to save your changes afterwards.</p>"},{"location":"admin-ui/#users","title":"Users","text":"<p>In the \"Users\" section you can manage your employees which have access to your Seatsurfing organisation.</p> <p>Depending on your configuration in the Settings (see below), your employees can log in to Seatsurfing when successfully authenticated against your corporation's user directory service. This way, there's no need to administer all Seatsurfing users manually. When logging in for the first time, a Seatsurfing user account is created automatically.</p> <p>To create or modify users manually, click the \"Add\" button or click a user from the list. You can set the username (using the user's email address) and his password. Setting a password is only necessary if your user is not authenticating using a linked authentication provider.</p> <p>Additionally, you can flag certain users as organisation administrators. Administrators have full access to Seatsurfing's administrator web-interface. Thus, administrators should have long, secure and complex passwords.</p>"},{"location":"admin-ui/#bookings","title":"Bookings","text":"<p>In the \"Bookings\" section you can view the bookings of your emloyees in a certain period.</p> <p>You can choose the period to be shown in the area at the top.</p> <p>Adding or changing bookings through administrators is not possible.</p>"},{"location":"admin-ui/#settings","title":"Settings","text":"<p>In the \"Settings\" section you can configure settings which apply to your entire Seatsurfing organisation.</p>"},{"location":"admin-ui/#common-settings","title":"Common settings","text":"<p>Allow login of all authenticatable users: When enabled, users can authenticate using an associated auth provider (see below) without having to be managed in Seatsurfing's internal user directory beforehand. A user account in Seatsurfing's database will be created upon first successful authentication.</p> <p>Max. bookings per user: Limits the number of upcoming bookings per user.</p> <p>Max. concurrent bookings per user: Determines how many concurrent bookings each user may have.</p> <p>Max. days in advance: Specifies how many days in advance a booking can be placed.</p> <p>Don't restrict admins (bookings per user, duration, in advance): If this flag is set all admins (FloorPlan/Org/Super) are allowed to book limitless, except the max-bookings-per-area limitation.</p> <p>Allow bookings on a daily basis only: When enabled, users can book spaces for entire days only and do not need to enter enter and leave times.</p> <p>Max. booking duration: Limits the duration of a single bookings.</p> <p>Show bookers' names: Reveal the names of other bookers when booking a space. You should mind the privacy.</p> <p>Confluence Shared Secret: A shared secret which is required for signing messages when using Seatsurfing's Confluence App.</p> <p>Domains: A list of domains which can be used your user's email addresses. If not a global administrator, adding a domain requires an ownership verification. This requires access to your domain's DNS server as a TXT record needs to be added.</p>"},{"location":"admin-ui/#auth-providers","title":"Auth Providers","text":"<p>Auth providers are services taking care of authenticating your users using standardised, secure protocols. Seatsurfing currently supports the OAuth 2 protocol.</p> <p>By adding an auth provider, you can validate your Seatsurfing logins using your company's internal user directory. The passwords (or other identification criteria) entered by your users are not transferred to Seatsurfing when using an auth provider.</p> <p>To add an auth provider, click the Add button at the upper right. Depending on the type of your auth provider, various different technical information are needed. Please ask your auth provider's technical administrator for these information. You can also use the templates prepared at the bottom of the dialog.</p> <p>Auth providers can be used in addition to password authentication. When logging in, Seatsurfing checks if the requested user already exists in Seatsurfing's internal user directory. If he does exist and password authentication is enabled, the user will be prompted for her password. If it does not exists or has no password set, she can log in using one of the configured auth providers.</p>"},{"location":"admin-ui/#danger-zone","title":"Danger zone","text":"<p>Use this section to delete your Seatsurfing organisation. The deletion is performed irrevocably. All data associated with your Seatsurfing organisation will be deleted and can not be restored. You should only use this functionality if you're absolutely sure about what you're doing.</p>"},{"location":"admin-ui/#search","title":"Search","text":"<p>The search box at the top of the administator web-interface can be used by entering a keyword and pressing the enter key.</p> <p>Search includes your users' email addresses (usernames) as well as the names of areas and spaces.</p>"},{"location":"booking-ui/","title":"Web App","text":"<p>Seatsurfing features a mobile-ready Web Booking Interface. The web app is a Progressive Web App (PWA), which means it can be \"installed\" on your mobile device's home screen and includes caching mechanisms. You can access the web booking UI using a modern web browser at:</p> <p>http://localhost:8080/ui/</p> <p>Your employees can use the web app to book their spaces independently and to manage their bookings, including the cancellation of their own existing bookings.</p> <p>After logging in, the web booking UI should look like this:</p> <p></p> <p>From here, you can directly start to book a space.</p> <p>Using the navigation bar at the top of the screen, you can view your upcomings bookings.</p>"},{"location":"booking-ui/#logging-in","title":"Logging in","text":"<p>To log in, you need to know your Seatsurfing instance's URL and must have a user account. For both, ask your organisation's Seatsurfing administrators.</p> <p>Open the web app on your mobile device or computer. Afterwards, you can select one or more login methods.</p> <p>If entering a password is required, you'll be asked to enter it.</p> <p>Otherwise, you'll see one or more available authentication methods. Choose one of them. You'll be redirected to your organisation's authentication service. Due to technical reasons, you may need to enter your email address a second time. After logging in, you'll be redirected back to the Seatsurfing ap. Depending on your connection, this might take a few seconds.</p>"},{"location":"booking-ui/#place-a-booking","title":"Place a booking","text":"<p>To place a bookings, choose the desired period and area (i.e. floor).</p> <p>You'll then see a floor plan showing the available (green) and unavailable (red) spaces. You can book a space by tapping it.</p> <p>Your organisation might have configured additional restrictions, such as:</p> <ul> <li>Max. booking duration</li> <li>Max. number of upcoming bookings per person</li> <li>Max. days a booking can be placed in advance</li> </ul> <p>If such a restriction applies, an according message will be shown.</p>"},{"location":"booking-ui/#manage-bookings","title":"Manage bookings","text":"<p>To manage your upcoming bookingsm tap \"My bookings\".</p> <p>You'll see a list of your upcoming bookings in ascending order. To show details or to cancel a booking, tap it.</p> <p>To keep things simple, it's not possible to modify an existing booking. Instead, you'll have to cancel and place a new booking.</p>"},{"location":"booking-ui/#add-to-home-screen","title":"Add to home screen","text":"<p>As a Progressive Web App (PWA), your users can \"install\" the booking web app. This means, they can add a shortcut to their home screen so they can subsequently access it with a single tap.</p> <p>The process to install the Seatsurfing PWA differs between browsers. The MDM web docs provide a good overview on how to install a PWA in various browsers and operating systems.</p>"},{"location":"config/","title":"Configuration","text":"<p>While you can configure organisation-specific settings in the administrator web interface, global settings are set using environment variables. Set these environment variables when running the Seatsurfing backend Docker container.</p>"},{"location":"config/#example-using-docker-compose","title":"Example: Using Docker Compose","text":"<pre><code>environment:\n  POSTGRES_URL: 'postgres://seatsurfing:DB_PASSWORD@db/seatsurfing?sslmode=disable'\n  INIT_ORG_DOMAIN: 'your-domain.com'\n  ...\n</code></pre>"},{"location":"config/#list-of-environment-variables","title":"List of environment variables","text":""},{"location":"config/#backend","title":"Backend","text":"Environment Variable \u00a0Type \u00a0Default \u00a0Description DEV bool \u00a00 Development Mode, set to 1 to enable PUBLIC_LISTEN_ADDR string \u00a00.0.0.0:8080 TCP/IP listen address and port PUBLIC_URL string \u00a0http://localhost:8080 Public URL FRONTEND_URL string \u00a0http://localhost:8080 Frontend URL (usually matches the Public URL) ADMIN_UI_BACKEND string localhost:3000 Host serving the Admin UI frontend BOOKING_UI_BACKEND string localhost:3001 Host serving the Booking UI frontend DISABLE_UI_PROXY bool 0 Disable proxy for admin and booking UI, set to 1 to disable the proxy POSTGRES_URL string \u00a0postgres://postgres:root @ localhost/seatsurfing?sslmode=disable PostgreSQL Connection JWT _SIGNING_KEY string random string JWT Signing Key SMTP_HOST string \u00a0127.0.0.1 SMTP server address SMTP_PORT int \u00a025 SMTP server port SMTP_START_TLS bool \u00a00 Use SMTP STARTTLS extension, set to 1 to enable SMTP_INSECURE_SKIP_VERIFY bool \u00a00 Disable SMTP TLS certificate validation SMTP_AUTH bool \u00a00 SMTP authentication, set to 1 to enable SMTP_AUTH_USER string SMTP auth username SMTP_AUTH_PASS string SMTP auth password SMTP_SENDER_ADDRESS string \u00a0no-reply@seatsurfing.local SMTP sender address MOCK_SENDMAIL bool \u00a00 SMTP mocking, set to 1 to enable PRINT_CONFIG bool \u00a00 Print configuration on startup, set to 1 to enable INIT_ORG_NAME string \u00a0Sample Company Your organization's name INIT_ORG_DOMAIN string \u00a0seatsurfing.local Your organization's domain INIT_ORG_USER string \u00a0admin Your organization's admin username INIT_ORG_PASS string \u00a012345678 Your organization's admin password INIT_ORG_COUNTRY string \u00a0DE Your organization's ISO country code INIT_ORG_LANGUAGE string \u00a0de Your organization's ISO language code ORG_SIGNUP_ENABLED bool \u00a00 Allow signup of new organizations, set to 1 to enable ORG_SIGNUP_DOMAIN string .on.seatsurfing.local Signup domain suffix ORG_SIGNUP_ADMIN string \u00a0admin Admin username for new signups ORG_SIGNUP_MAX_USERS int \u00a050 Maximum number of users for new organisations ORG_SIGNUP_DELETE bool \u00a00 Allow admins to delete their own organisation LOGIN_PROTECTION_MAX_FAILS int \u00a010 Number of failed login attempts before user gets banned LOGIN_PROTECTION_SLIDING_WINDOW_SECONDS int \u00a0600 Sliding window size in seconds for checking failed login attempts LOGIN_PROTECTION_BAN_MINUTES int \u00a05 Ban time in minutes"},{"location":"config/#frontend-admin-ui-booking-ui","title":"Frontend (Admin UI, Booking UI)","text":"Environment Variable \u00a0Type \u00a0Default \u00a0Description FRONTEND_URL string <code>req.url</code> Frontend URL PORT int \u00a03000 (Admin UI), 3001 (Booking UI) The server's HTTP port"},{"location":"confluence/","title":"Confluence","text":"<p>You can integrate the web booking interface for your employees into Atlassian Confluence. This could be beneficially if you're already using Confluence in your organisation for collaboration. As organising common spaces for real-life collaboration is an essential part of this, Seatsurfing is also available as a Confluence App.</p> <p>Using the Confluence App requires the Seatsurfing backend to be up and running. It's not a replacement for it, but an additional frontend for the Booking Site.</p>"},{"location":"confluence/#confluence-cloud","title":"Confluence Cloud","text":"<p>Get the App from the Atlassian Marketplace.</p> <p>After having installed the App in your Confluence instance, click 'Configure' within the Seatsurfing App panel under 'Manage apps'. You'll need to specify the following settings here:</p> <ul> <li>Backend URL: The URL of your Seatsurfing instance. Leave empty if you use Cloud hosting.</li> <li>Instance ID: The unique identifier of your Seatsurfig instance. To find this, log in to Seatsurfing's Admin interface, go to 'Settings' and copy the Instance ID.</li> <li>Shared Secret: A self-chosen shared secret which is set both here and in your Seatsurfing's instance Admin interface. To set this, log in to Seatsurfing's Admin interface and go to 'Settings'.</li> </ul> <p>To integrate the Seatsurfing App, insert the Seatsurfing macro into a Confluence page.</p> <p>When using the Seatsurfing App for Confluence, users will be assigned a somewhat cryptic email address like confluence-&lt;username&gt;@&lt;seatsurfing-defaultdomain&gt;. This is due to the fact the the actual email address cannot be consumed by the App. If required, users can merge these accounts with their actual Seatsurfing accounts by clicking the Merge Icon in the upper right corner.</p> <p>Note: Before 2022-06-16, there was a bug in registering client instances correctly. If you see the error message \"Could not find stored client data for &lt;UUID&gt;. Is this client registered?\", please uninstall and then re-install the App from Atlassian Marketplace. This will not affect your existing settings, users or bookings.</p>"},{"location":"confluence/#confluence-data-center","title":"Confluence Data Center","text":"<p>Get the App from the Atlassian Marketplace.</p> <p>After having installed the App in your Confluence instance, navigate to your Confluence configuration (gear icon in the upper right) and click 'Seatsurfing Configuration'. You'll need to specify the following settings here:</p> <ul> <li>Backend URL: The URL of your Seatsurfing instance. Leave empty if you use Cloud hosting.</li> <li>Instance ID: The unique identifier of your Seatsurfig instance. To find this, log in to Seatsurfing's Admin interface, go to 'Settings' and copy the Instance ID.</li> <li>Shared Secret: A self-chosen shared secret which is set both here and in your Seatsurfing's instance Admin interface. To set this, log in to Seatsurfing's Admin interface and go to 'Settings'.</li> </ul> <p>To integrate the Seatsurfing App, insert the Seatsurfing macro into a Confluence page.</p> <p>If available, users are identified by their email address. If a user's email address in Confluence is the same as a user's email address in Seatsurfing, it is handled as the same user account. If not, it's possible to manually merge a user account created via Confluence with a \"regular\" Seatsurfing account. Users can do this by clicking the Merge Icon in the upper right corner.</p>"},{"location":"confluence/#confluence-server","title":"Confluence Server","text":"<p>Coming soon.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#introduction","title":"Introduction","text":"<p>Seatsurfing is a solution for organisations and enterprises. It allows your employees to book spaces and seats on their own. Seatsurfing enables organisations to drive change towards flexible working times and free seating.</p> <p>Seatsurfing uses an abstract model for bookable locations. You can therefore use Seatsurfing for multiple purposes:</p> <ul> <li>Booking single seats in co-working facilities (free seating, flexible seating)</li> <li>Booking entire rooms (i.e. conference rooms)</li> <li>Booking parking lots</li> <li>...and more...</li> </ul> <p>The application does currently not contain an accounting model. This means that you can't bill commercially rentable spaces (such as desks in a coworking space). Seatsurfing is meant for organisations providing free seats to their employees.</p>"},{"location":"features/#components","title":"Components","text":"<p>Seatsurfing consists of:</p> <ul> <li>A server backend providing a REST API</li> <li>A web-based administrator interface for ones managing the spaces and users (bundled with the server backend)</li> <li>A mobile-ready progressive web app (PWA) which can be used by an organisation's employees to book seats (also available as a Confluence App, bundled with the server backend)</li> </ul>"},{"location":"features/#features_1","title":"Features","text":"<p>The most important features of Seatsurfing are:</p> <ul> <li>Booking seats quickly and flexibly using a mobile-ready web app</li> <li>Logging in via password or OAuth2</li> <li>Uploading room plans as JPEG, PNG or GIF</li> <li>Placing spaces/seats via drag &amp; drop</li> <li>Configurable booking settings (i.e. max. booking duration, notice and count)</li> <li>Viewing booking and utilization statistics</li> </ul>"},{"location":"features/#hosting","title":"Hosting","text":"<p>Seatsurfing is provided as a Docker image for hosting on-premises. It has been tested using <code>docker run</code>, Docker Compose and Kubernetes.</p>"},{"location":"getting-started/","title":"Docker / Compose","text":""},{"location":"getting-started/#1-system-requirements","title":"1. System Requirements","text":"<p>To set up the Seatsurfing backend on your server, the following system requirements must be met:</p> <ul> <li>Linux server</li> <li>Docker runtime environment (or CRI/containerd in case of Kubernetes, tested with Docker Engine version 20.x and containerd version 1.4.x)</li> <li>PostgreSQL (tested with PostgreSQL version 12 to 16)</li> <li>Optionally: Docker Compose (tested with Docker Comopse version 2.x)</li> <li>Recommended: Reverse proxy with TLS termination (tested with Traefik version 2.x)</li> </ul>"},{"location":"getting-started/#2-setting-up-the-container","title":"2. Setting up the container","text":"<p>The following example demonstrates setting up Seatsurfing backend using Docker Compose. We'll start the required PostgreSQL database as part of the compose file.</p> <p>For simplicity and demonstration purposes only, container port 8080 is published directly on the host. When using Seatsurfing in production, you should place a reverse proxy in front of the Seatsurfing backend which also takes care of TLS termination.</p>"},{"location":"getting-started/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.7'\n\nservices:\n  server:\n    image: ghcr.io/seatsurfing/backend\n    restart: always\n    networks:\n      sql:\n      http:\n    ports:\n      - 8080:8080\n    environment:\n      POSTGRES_URL: 'postgres://seatsurfing:DB_PASSWORD@db/seatsurfing?sslmode=disable'\n      JWT_SIGNING_KEY: 'some_random_string'\n      BOOKING_UI_BACKEND: 'booking-ui:3001'\n      ADMIN_UI_BACKEND: 'admin-ui:3000'\n      PUBLIC_URL: 'https://seatsurfing.your-domain.com'\n      FRONTEND_URL: 'https://seatsurfing.your-domain.com'\n  booking-ui:\n    image: ghcr.io/seatsurfing/booking-ui\n    restart: always\n    networks:\n      http:\n    environment:\n      FRONTEND_URL: 'https://seatsurfing.your-domain.com'\n  admin-ui:\n    image: ghcr.io/seatsurfing/admin-ui\n    restart: always\n    networks:\n      http:\n    environment:\n      FRONTEND_URL: 'https://seatsurfing.your-domain.com'\n  db:\n    image: postgres:16\n    restart: always\n    networks:\n      sql:\n    volumes:\n      - db:/var/lib/postgresql/data\n    environment:\n      POSTGRES_PASSWORD: DB_PASSWORD\n      POSTGRES_USER: seatsurfing\n      POSTGRES_DB: seatsurfing\n\nvolumes:\n  db:\n\nnetworks:\n  sql:\n  http:\n</code></pre> <p>This starts... * a PostgreSQL database with data stored on Docker volume \"db\" * a Seatsurfing Backend instance with port 8080 exposed. * a Seatsurfing Booking UI instance which is accessible through the Backend instance at: :8080/ui/ * a Seatsurfing Admin UI instance which is accessible through the Backend instance at: :8080/admin/</p> <p>Start the Seatsurfing backend by running: <code>docker compose up -d</code></p> <p>Afterwards, Seatsurfing can be accessed at: http://localhost:8080</p>"},{"location":"getting-started/#3-initial-configration","title":"3. Initial configration","text":"<p>Access the administrator web-interface using a modern web browser (i.e. Chrome, Firefox, Safari) at: http://localhost:8080/admin/</p> <p>By default, an organisation with one administrator account is created on backend startup if no organisation already exists in the specified database. If not defined otherwise, use <code>admin@seatsurfing.local</code> as the username and <code>12345678</code> as the password.</p> <p>The administrator interface can be used to manage room plans, users and settings. Read more about it in the Administration section.</p>"},{"location":"getting-started/#4-use-the-web-app-to-book-spaces","title":"4. Use the web app to book spaces","text":"<p>Let your coworkers use the progressive web app (PWA) to book spaces using their mobile devices or desktop computers:</p> <p>http://localhost:8080/ui/</p>"},{"location":"kubernetes/","title":"Kubernetes","text":""},{"location":"kubernetes/#1-system-requirements","title":"1. System Requirements","text":"<p>To set up the Seatsurfing backend on Kubernetes, the following system requirements must be met:</p> <ul> <li>Linux server(s)</li> <li>Kubernetes cluster with at least one worker node (tested with Kubernetes 1.22 and containerd version 1.5.x)</li> <li>Persistent storage for Postgres database (tested with Longhorn 1.2.x)</li> <li>Recommended: Reverse proxy with TLS termination (tested with nginx in front of Kubernetes' Traefik ingress)</li> </ul>"},{"location":"kubernetes/#2-create-database-secret","title":"2. Create database secret","text":"<p>Create a secret for your database password using <code>kubectl</code>:</p> <pre><code>kubectl create secret generic seatsurfing-db \\\n  --from-literal=db-password='DB_PASSWORD'\n</code></pre> <p>Make sure to replace <code>DB_PASSWORD</code> with a secure password.</p>"},{"location":"kubernetes/#3-create-database-deployment","title":"3. Create database deployment","text":"<p>Next, we'll create the necessary configurations and deployment for the Postgres database. This configuration contains:</p> <ul> <li>A persistent volume claim which contains the database files (adjust as needed)</li> <li>A deployment of Postgres version 16, inluding some adjustments to make sure Postgres runs well on Kubernetes</li> <li>A service which exposes TCP port 5432 of our Postgres database server</li> <li>A network policy which ensures that only our Seatsurfing backend is able to connect to the Postgres database service</li> </ul> <p>Create a file <code>seatsurfing-db.yaml</code> with the following contents (modify as needed):</p> <pre><code>kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: seatsurfing-db\nspec:\n  storageClassName: longhorn\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1G\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: seatsurfing-db\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: seatsurfing-db\n  template:\n    metadata:\n      labels:\n        app: seatsurfing-db\n    spec:\n      securityContext:\n        fsGroup: 999\n      volumes:\n      - name: db\n        persistentVolumeClaim:\n          claimName: seatsurfing-db\n      initContainers:\n      - image: alpine:latest\n        name: init\n        command: [\"sh\", \"-c\", \"chown 999:999 /var/lib/postgresql/data\"]\n        volumeMounts:\n        - mountPath: \"/var/lib/postgresql/data\"\n          name: db\n          readOnly: false\n          subPath: postgres\n      containers:\n      - image: postgres:16\n        name: db\n        imagePullPolicy: Always\n        ports:\n        - name: port-postgres\n          containerPort: 5432\n        env:\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: seatsurfing-db\n              key: db-password\n        - name: POSTGRES_USER\n          value: \"seatsurfing\"\n        - name: POSTGRES_DB\n          value: \"seatsurfing\"\n        volumeMounts:\n        - mountPath: \"/var/lib/postgresql/data\"\n          name: db\n          readOnly: false\n          subPath: postgres\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: seatsurfing-db\nspec:\n  ports:\n    - port: 5432\n      protocol: TCP\n      targetPort: 5432\n  selector:\n    app: seatsurfing-db\n  type: ClusterIP\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: seatsurfing-db\nspec:\n  podSelector:\n    matchLabels:\n      app: seatsurfing-db\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: seatsurfing-backend\n</code></pre> <p>Apply the file:</p> <pre><code>kubectl apply -f seatsurfing-db.yaml\n</code></pre>"},{"location":"kubernetes/#4-create-seatsurfing-deployment-and-ingress","title":"4. Create Seatsurfing deployment and ingress","text":"<p>Now we're ready to create the configurations and the deployment of our actual Seatsurfing containers (backend, admin-ui, booking-ui). This includes:</p> <ul> <li>A deployment of the Seatsurfing REST API backend, which connects to the previously deployed Postgres database server</li> <li>A deployment of the Seatsurfing Admin Web Interface (admin-ui), which is not directly accessible, but incoming requests are forwarded to it via the backend</li> <li>A deployment of the Seatsurfing Booking Web Interface (booking-ui), which is not directly accessible, but incoming requests are forwarded to it via the backend</li> <li>A service which exposes port 80 of the Seatsurfing backend</li> <li>An ingress which makes the Seatsurfing backend available at host <code>seatsurfing.your-domain.com</code> (you'll need to change that) using Traefik</li> </ul> <p>Please note: We're making the backend available insecurely via HTTP here. This example assumes you're having a reverse proxy performing TLS termination in front of your Kubernetes cluster. If this is not the case, you should really consider changing port 80 to 443 and add HTTPS encryption to the example.</p> <p>Create a file <code>seatsurfing-backend.yaml</code> with the following contents (modify as needed):</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: seatsurfing-backend\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: seatsurfing-backend\n  template:\n    metadata:\n      labels:\n        app: seatsurfing-backend\n    spec:\n      containers:\n      - image: ghcr.io/seatsurfing/backend:latest\n        name: server\n        imagePullPolicy: Always\n        ports:\n        - name: port-http\n          containerPort: 8080\n        env:\n        - name: POSTGRES_PASS\n          valueFrom:\n            secretKeyRef:\n              name: seatsurfing-db\n              key: db-password\n        - name: POSTGRES_URL\n          value: \"postgres://seatsurfing:$(POSTGRES_PASS)@seatsurfing-db/seatsurfing?sslmode=disable\"\n        - name: JWT_SIGNING_KEY\n          value: \"a_random_key\"\n        - name: PUBLIC_URL\n          value: \"https://seatsurfing.your-domain.com\" \n        - name: FRONTEND_URL\n          value: \"https://seatsurfing.your-domain.com\"\n      - image: ghcr.io/seatsurfing/booking-ui:latest\n        name: booking-ui\n        imagePullPolicy: Always\n        env:\n        - name: FRONTEND_URL\n          value: \"https://seatsurfing.your-domain.com\"\n      - image: ghcr.io/seatsurfing/admin-ui:latest\n        name: admin-ui\n        imagePullPolicy: Always\n        env:\n        - name: FRONTEND_URL\n          value: \"https://seatsurfing.your-domain.com\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: seatsurfing-backend\nspec:\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: seatsurfing-backend\n  type: ClusterIP\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: seatsurfing-backend\nspec:\n  entryPoints:\n    - web\n  routes:\n  - match: Host(`seatsurfing.your-domain.com`)\n    kind: Rule\n    services:\n    - name: seatsurfing-backend\n      port: 80\n</code></pre> <p>Apply the file:</p> <pre><code>kubectl apply -f seatsurfing-backend.yaml\n</code></pre> <p>Make sure <code>seatsurfing-db</code> and <code>seatsurfing-backend</code>and \"Running\":</p> <pre><code>kubectl get pods | grep seatsurfing\n</code></pre> <p>Afterwards, Seatsurfing can be accessed at the specified host (i.e. https://seatsurfing.your-domain.com).</p>"},{"location":"kubernetes/#5-initial-configration","title":"5. Initial configration","text":"<p>Access the administrator web-interface using a modern web browser (i.e. Chrome, Firefox, Safari) at: /admin/</p> <p>By default, an organisation with one administrator account is created on backend startup if no organisation already exists in the specified database. If not defined otherwise, use <code>admin@seatsurfing.local</code> as the username and <code>12345678</code> as the password.</p> <p>The administrator interface can be used to manage room plans, users and settings. Read more about it in the Administration section.</p>"},{"location":"kubernetes/#6-use-the-web-app-to-book-spaces","title":"6. Use the web app to book spaces","text":"<p>Let your coworkers use the progressive web app (PWA) to book spaces using their mobile devices or desktop computers:</p> <p>http://localhost:8080/ui/</p>"},{"location":"rest-api/","title":"Rest API","text":"<p>Seatsurfing provides and uses a couple of REST APIs. The REST APIs are used by the mobile and web app as well as the administrator web interface.</p>"},{"location":"rest-api/#authorization-checks","title":"Authorization checks","text":"<p>Each API function is protected by authorization checks:</p> <ul> <li>First check: Role of the user (anonymous, user, org admin, super admin)</li> <li>Second check: Organisation membership</li> </ul>"},{"location":"rest-api/#status-codes","title":"Status Codes","text":"<p>Seatsurfing's REST API uses the well known HTTP status codes to inform the caller about the result and eventual errors:</p> <ul> <li>201 Created: Object created (includes HTTP response header <code>X-Object-ID</code>)</li> <li>204 No Content: Object updated or no response content</li> <li>400 Bad Request: Malformed request or incomplete JSON</li> <li>401 Unauthorized: JWT in HTTP request header <code>Authorization</code> missing, expired or invalid</li> <li>403 Forbidden: Authorized, by user has no access to requested resource</li> <li>404 Not found: Object not found</li> <li>409 Conflict: Conflicting request</li> <li>500 Internal Server Error</li> </ul>"},{"location":"rest-api/#roles","title":"Roles","text":"<ul> <li>Anonymous: Every user allowed, no authorization required</li> <li>User: Authorized user who is a member of an organisation</li> <li>Org Admin: An organisation's administrator</li> <li>Super Admin: Global administrator with access to all organisations and all functions</li> </ul>"},{"location":"rest-api/#endpoints","title":"Endpoints","text":""},{"location":"rest-api/#authentication","title":"Authentication","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Password Login /auth/login POST X Preflight Login to check for available login methods /auth/preflight POST X Perform OAuth Login /auth/{id}/login/{type} GET X OAuth Callback (server to server) /auth/{id}/callback GET X Retrieve JWT from frontend / app after OAuth Login /auth/verify/{id} GET X Check if instance hosts one organization only /auth/singleorg GET X"},{"location":"rest-api/#bookings","title":"Bookings","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get one own booking /booking/{id} GET X Update one own booking /booking/{id} PUT X Delete one own booking /booking/{id} DELETE X Create new own booking /booking/ POST X Create new booking for others /booking/ POST X Get user's own upcoming bookings /booking/ GET X Get filtered org bookings /booking/filter/ POST X"},{"location":"rest-api/#locations","title":"Locations","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get one location /location/{id} GET X Update one location /location/{id} PUT X Delete one location /location/{id} DELETE X Get all organization's location /location/ GET X Create a new location /location/ POST X Get location map /location/{id}/map GET X Set/update location map /location/{id}/map POST X"},{"location":"rest-api/#spaces","title":"Spaces","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get one space /location/{locationId}/space/{id} GET X Update one space /location/{locationId}/space/{id} PUT X Delete one space /location/{locationId}/space/{id} DELETE X Get all spaces in a location /location/{locationId}/space/ GET X Create a new space in a location /location/{locationId}/space/ POST X Get spaces with availability information for a specific time period /location/{locationId}/space/availability POST X"},{"location":"rest-api/#organisations","title":"Organisations","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get one organization /organization/{id} GET X Update one organization /organization/{id} PUT X Delete one organization /organization/{id} DELETE X Get all organizations /organization/ GET X Create a new organization /organization/ POST X Get organization for domain /organization/domain/{domain} GET X Get all domains for an organization /organization/{id}/domain/ GET X Add a new domain to an organization /organization/{id}/domain/{domain} POST X Remove a domain from an organization /organization/{id}/domain/{domain} DELETE X Verify DNS-TXT-Record for a domain /organization/{id}/domain/{domain}/verify POST X"},{"location":"rest-api/#search","title":"Search","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get search results for keyword /search/{keyword} GET X"},{"location":"rest-api/#settings","title":"Settings","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get all settings /setting/ GET X Update all settings /setting/ PUT X Get one setting /setting/{name} GET X Update one setting /setting/{name} PUT X"},{"location":"rest-api/#signup","title":"Signup","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Signup and init double-opt-in /signup/ POST X Complete double-opt-in process /signup/confirm/{id} POST X"},{"location":"rest-api/#statistics","title":"Statistics","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get organization's stats /stats/ GET X"},{"location":"rest-api/#users","title":"Users","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get one user /user/{id} GET X Update one user /user/{id} PUT X Delete one user /user/{id} DELETE X Set a user's password /user/{id}/password PUT X Get all users of an organization /user/ GET X Create a new user in an organization /user/ POST X Get user's own details /user/me GET X"},{"location":"rest-api/#auth-providers","title":"Auth Providers","text":"Function \u00a0Endpoint Method Anonymous \u00a0User \u00a0Org Admin \u00a0Super Admin Get one auth provider /auth-provider/{id} GET X Update one auth provider /auth-provider/{id} PUT X Delete one auth provider /auth-provider/{id} DELETE X Get all auth providers of an organization /auth-provider/ GET X Create a new auth provider in an organization /auth-provider/ POST X Get public auth provider information for an organization /auth-provider/org/{id} GET X"},{"location":"support/","title":"Support","text":"<p>GitHub is a free open source project. We currently don't provide commercial support. Please refer to the following channels for more information:</p>"},{"location":"support/#feature-requests-issues","title":"Feature Requests &amp; Issues","text":"<p>If you have a feature request, need support or found a bug, please open an issue on GitHub:</p> <p>github.com/seatsurfing</p>"},{"location":"support/#for-users","title":"For users","text":"<p>If you're using Seatsurfing to book spaces, seats or desks and need assistance, please contact your organisation's Seatsurfing administrators.</p>"},{"location":"support/#availability","title":"Availability","text":"<p>We're continuously monitoring the availability of our servers using automated monitoring systems. If an error occurs, we're notified automtically so we can act quickly. You can view the status of Seatsurfing's systems here:</p> <p>status.seatsurfing.app</p>"},{"location":"support/#donating-sponsoring","title":"Donating / Sponsoring","text":"<p>We would be pleased if you support our effort by donating / sponsoring:</p> <p>github.com/sponsors/seatsurfing</p>"},{"location":"upgrading/","title":"Upgrading","text":"<p>Seatsurfing supports automated in-place upgrades. When starting a newer version of Seatsurfing backend with an existing database, the database schema version is determined and required schema upgrades are performed automatically.</p> <p>Note: Downgrades are not supported and may result in startup failures and corrupt data!</p>"},{"location":"upgrading/#steps-to-upgrade","title":"Steps to upgrade","text":"<ol> <li>Backup your existing Seatsurfing database. Example: <code>pg_dumpall -U seatsurfing' &gt; ./seatsurfing_db.psql</code></li> <li>Shut down the running Seatsurfing backend Docker container.</li> <li>Start the newer version of the Seatsurfing backend with the existing database.</li> </ol>"},{"location":"auth-provider/azure/","title":"Microsoft Azure","text":"<p>You can connect your Microsoft Azure Tenant as an Auth Provider for Seatsurfing.</p>"},{"location":"auth-provider/azure/#1-configure-your-azure-tenant","title":"1. Configure your Azure Tenant","text":"<ol> <li>Log in to the Microsoft Azure Portal.</li> <li>Navigate to \"App registrations\".</li> <li>Create a new application with supported account type \"Accounts in this organizational directory only (Default Directory only - Single tenant)\"</li> <li>Copy the Application (client) ID.</li> <li>Navigate to \"Certificates &amp; secrets\", create a new Client secret and copy the Secret Value (not the ID).</li> <li>Navigate to \"API permissions\", click \"Add permission\", choose \"Microsoft Graph\", select \"Delegated\". Then search and add the required permissions:<ul> <li><code>email</code></li> <li><code>User.Read</code></li> </ul> </li> </ol>"},{"location":"auth-provider/azure/#2-configure-seatsurfing","title":"2. Configure Seatsurfing","text":"<ol> <li>Log in to Seatsurfing's Administrator UI.</li> <li>Navigate to Settings and add a new Auth Provider.</li> <li>Select the Microsoft template.</li> <li>Paste the Application (client) ID into the \"Client ID\" field.</li> <li>Paste the Secret Value into the \"Client Secret\" field.</li> <li>Save the Auth Provider.</li> <li>Copy the Callback URL which is displayed right after saving.</li> </ol>"},{"location":"auth-provider/azure/#3-finish-azure-configuration","title":"3. Finish Azure Configuration","text":"<ol> <li>Head back to the App Registration you've created in the Azure Portal in Step 1.</li> <li>Navigate to \"Authentication\" and add the copied Callback URL from Step 2 as a Web Redirect URI (i.e. <code>https://app.seatsurfing.app/auth/xyz/callback</code>).</li> </ol>"},{"location":"auth-provider/google/","title":"Google Cloud","text":"<p>You can connect your Google Cloud Platform as an Auth Provider for Seatsurfing.</p>"},{"location":"auth-provider/google/#1-configure-your-google-cloud-platform-account","title":"1. Configure your Google Cloud Platform Account","text":"<ol> <li>Log in to the Google Cloud Console.</li> <li>Navigate to \"APIs and services\".</li> <li>Click \"Create credentials\" and choose \"OAuth client ID\".</li> <li>Create a new client ID with Application Type \"Web application\" and save it.</li> <li>Copy the Client ID and the Client Secret.</li> </ol>"},{"location":"auth-provider/google/#2-configure-seatsurfing","title":"2. Configure Seatsurfing","text":"<ol> <li>Log in to Seatsurfing's Administrator UI.</li> <li>Navigate to Settings and add a new Auth Provider.</li> <li>Select the Google template.</li> <li>Paste the Client ID into the \"Client ID\" field.</li> <li>Paste the Secret ID into the \"Client Secret\" field.</li> <li>Save the Auth Provider.</li> <li>Copy the Callback URL which is displayed right after saving.</li> </ol>"},{"location":"auth-provider/google/#3-finish-google-cloud-configuration","title":"3. Finish Google Cloud Configuration","text":"<ol> <li>Head back to the OAuth Client you've created in the Google Cloud Console in Step 1.</li> <li>Click \"Add URI\" under \"Authorised redirect URIs\" and add the copied Callback URL from Step 2 as a Web Redirect URI (i.e. <code>https://app.seatsurfing.app/auth/xyz/callback</code>).</li> </ol>"},{"location":"auth-provider/keycloak/","title":"Keycloak","text":"<p>You can connect your Keycloak-instance as an Auth Provider for Seatsurfing.</p>"},{"location":"auth-provider/keycloak/#1-configure-your-keycloak-instance","title":"1. Configure your Keycloak-instance","text":"<ol> <li>Log in to your instance' administration console.</li> <li>Goto Clients and click Create.</li> <li>Choose a Client-ID, select openid-connect and enter as Root URL the complete URL of your Seatsurfing installation and click Save.</li> <li>Now Change Access Type to confidential.</li> <li>Click Save, in the navigationbar \"Keys\" will appear.</li> <li>At \"Keys\" you can copy the secret for the next step.</li> </ol>"},{"location":"auth-provider/keycloak/#2-configure-seatsurfing","title":"2. Configure Seatsurfing","text":"<ol> <li>Log in to Seatsurfing's Administrator UI.</li> <li>Navigate to Settings and add a new Auth Provider.</li> <li>Select the Keycloak template.</li> <li>Paste the Client ID you have choosen in keycloak into the \"Client ID\" field.</li> <li>Paste the Secret Value into the \"Client Secret\" field.</li> <li>Change all keycloakhost.sample to your hostname and optional master to your realm.</li> <li>Save the Auth Provider.</li> <li>Copy the Callback URL which is displayed right after saving.</li> </ol>"},{"location":"auth-provider/keycloak/#3-finish-keycloak-configuration","title":"3. Finish Keycloak Configuration","text":"<ol> <li>Head back to the Client you've created in the Keycloak admin-console in Step 1.</li> <li>Change Valid Redirect URIs from https://...../* to /auth/xxxxxc/callback</li> </ol>"}]}